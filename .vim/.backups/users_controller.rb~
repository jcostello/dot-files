class UsersController < ApplicationController

  BASIC_ATTRIBUTES = %w[email first_name last_name phone]

  before_filter :require_authentication, :only => [:account, :update]
  before_filter :redirect_to_account_if_user_signed_in, :only => :new

  skip_before_filter :set_region, :only => :confirmation

  def new
    @user = Redo::User.new
    render_new
  end

  def create
    user_params = params[:user].slice(*BASIC_ATTRIBUTES)

    user = Redo::User.find_or_initialize_by_email(user_params[:email])
    user.update_attributes(user_params) unless user.registered?

    respond_to do |format|

      # For format HTML, we signup the user
      format.html {
        @user = Redo::User.signup!(params[:user], current_region, referral_token: params[:referral_token])

        if @user.errors.any?
          render_new
        else
          publish_interaction 'signup', @user.as_json
          sign_in(@user)
          redirect_new_user
        end
      }

      # For json, we dont want it to be registered, since this user was registered without
      # a password and validation would fail
      format.json {
        sign_in!(user)
        render json: {user: user.customer.attributes.slice(*BASIC_ATTRIBUTES) }
      }
    end
  end

  def account
    @pending_reservations = current_user.pending_reservations
    @pending_reviews = current_user.reviews.pending.includes(:restaurant)

    if @pending_reservations.empty? and @pending_reviews.empty?
      @suggested = Redo::Restaurant.in_region(current_region).published.order("RAND()").limit(4)
    end
  end

  def update
    @user = current_user

    respond_to do |format|

      # Assign customer attributes separately because as user belongs
      # to customer if we do it all at once it creates a new one
      @user.customer.assign_attributes(params[:user].delete(:customer_attributes)) if params[:user][:customer_attributes]
      @user.assign_attributes params[:user] if params[:user]

      if @user.save
        format.html {
          redirect_to(account_users_path,
                      :notice => I18n.t("users.account.success_updating_profile"))
        }
      else
        format.html {
          redirect_to(account_users_path,
                      :alert => I18n.t("users.account.error_updating_profile"))
        }
      end
    end
  end

  def validate_email
    email = params[:email] || (params[:user] && params[:user][:email])
    respond_to do |format|
      if email.present? && !Redo::User.registered.find_by_email(email)
        format.json { render :json => true }
      else
        format.json { render :json => false }
      end
    end
  end

  def modal_login_form
    render :layout => false
  end

  def confirmation
    user = Redo::User.confirm_by_token(params[:token])
    if user
      sign_in!(user)
      publish_interaction "user_email_confirmation", user.as_json(include: :customer)
      redirect_to account_users_path, :notice => I18n.t("users.confirmation.success")
    else
      publish_error "user_email_confirmation", token: params[:token]
      redirect_to root_path, :notice => I18n.t("users.confirmation.failure")
    end
  end

  def me
    respond_to do |format|
      format.json do
        if current_customer
          render json: { user: current_customer.as_json }
        else
          render json: { error: '401 Unauthorized' }, status: :unauthorized
        end
      end
    end
  end

  private

  def redirect_to_account_if_user_signed_in
    redirect_to account_users_path if user_signed_in?
  end

  def set_referral_token
    @referral_token = ReferralToken.initialize_from_params(params)
  end

  def render_new
    if set_referral_token
      render 'new_referral'
    else
      render 'new'
    end
  end

  def sign_in(user)
    Redo::EventEmitter.trigger 'new.user', @user
    sign_in!(user)
  end

  def redirect_new_user
    if mobile_device?
      cookies[:_redo_user_digest] = ["#{@user.email}:#{params[:user][:password]}"].pack("m*").gsub("\n", '')
      redirect_to RedoApp.mobile_host(extract_region_and_country_from_host)
    else
      redirect_to account_users_path, :flash => { :signup_method => 'Restorando' }
    end
  end
end
